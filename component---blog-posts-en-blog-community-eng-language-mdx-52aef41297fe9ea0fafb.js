(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"KF+n":function(e,n,t){"use strict";var a=t("Z0cm"),o=t.n(a),i=t("tLMu"),l=t("tW5L"),r=t("/xXG"),s=t("ImkT"),c=t("d+M2"),b=t("Wbzz"),p=t("2A+t"),u=t("izhR");function d(e){var n=e.children;return Object(p.c)(u.f,{sx:{width:["100%","100%","80%"],m:"0 auto",mt:[2,4,4],mb:[2,4,4],pl:[4,4,"64px"],pr:[4,4,0],position:"relative"}},n)}n.a=function(e){var n=e.children,t=e.pageContext,a=t.frontmatter,m=a.title,g=a.description,j=a.keywords,h=a.authors,O=a.date,f=a.image,y=a.recommend,w=Object(l.d)().t,N=Object(b.useStaticQuery)("3154936772"),x=N.blogPosts,v=N.siteContent,F=o()(h)&&h.length>1,T=F?h.slice(1,h.length):[],k=t.pagePath.split("/").splice(1,t.pagePath.split("/").length-2),C=k.indexOf("blog")+1,_=C!==k.length-1?k[C]:"general",I=null;I=null==f?"/images/blog_headers/"+_+"_1.png":isNaN(parseInt(f))?f:"/images/blog_headers/"+_+"_"+f+".png";var L=null==y?void 0:y.map((function(e){return x.edges.filter((function(n){return n.node.fileAbsolutePath.includes(e)}))[0]})).concat(null==y?void 0:y.map((function(e){return v.edges.filter((function(n){return n.node.fileAbsolutePath.includes(e)}))[0]}))).filter((function(e){return void 0!==e})),E=L&&L.length>0,S={title:m,description:g,keywords:j};return Object(p.c)(u.p,{sx:{flexDirection:"column"}},Object(p.c)(d,null,Object(p.c)(c.c,S),Object(p.c)(r.b,{outline:!0,icon:"chevron_left",to:"/blog"},w("Back_To_Blog")),Object(p.c)(s.a,{level:1},m),h?Object(p.c)(i.a,{sx:{mb:"16px"},authors:h,date:O,isDefaultLocale:!0}):null,Object(p.c)("img",{src:I,sx:{width:"100%",objectFit:"cover",maxHeight:"478px",mb:"48px"}}),Object(p.c)("div",{sx:{"& > *:first-of-type":{mt:0}}},n)),F?Object(p.c)(u.f,{sx:{pl:[4,4,"64px"],pr:[4,4,0],mt:2,mb:2}},Object(p.c)(r.i,null)):null,F?Object(p.c)(d,null,Object(p.c)("h2",{sx:{fontWeight:"500",fontSize:"32px"}}," Contributors "),Object(p.c)("p",{sx:{mb:"40px"}},"This article is possible with a little help from friends."),Object(p.c)(i.c,{contributors:T})):null,E?Object(p.c)(u.f,{sx:{pl:[4,4,"64px"],pr:[4,4,0],mt:4,mb:2}},Object(p.c)(r.i,null)):null,E?Object(p.c)(u.f,{sx:{width:["100%","100%","90%"],m:"0 auto",mt:[2,4,4],mb:[2,4,4],pl:[4,4,0],pr:[4,4,0],position:"relative"}},Object(p.c)("h2",{sx:{mb:"66px",fontWeight:"500",fontSize:"32px"}}," ","Read More"," "),Object(p.c)(u.p,{sx:{justifyContent:"start",width:"100%",mb:[0,"80px","80px"],flexDirection:["column","row","row"],"& > *:not(:last-child)":{mr:"96px"}}},L.map((function(e,n){var t=e.node;return Object(p.c)(i.b,Object.assign({},t,{key:"blog-recommendation-"+n}))})))):null)}},mPbw:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return d}));var a=t("zLVn"),o=(t("q1tI"),t("7ljp")),i=t("KF+n"),l={},r=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(o.b)("div",n)}},s=r("CTA"),c=r("List"),b=r("Link"),p={_frontmatter:l},u=i.a;function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)(u,Object.assign({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Translations can present a challenge. But not if you're ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/MaximumCrash"}),"Maximum Crash"),'. Our philosophy is that\n"content creators write the website," so the ',Object(o.b)("inlineCode",{parentName:"p"},"content")," folder therefore decides how the site is rendered,\n",Object(o.b)("em",{parentName:"p"},"including"),' translated content. However, this is an issue when translating inline UI elements that we won\'t\nprovide in MDX (like the Search bar). This means there\'s a break in how we can translate copy like "Search"\nand "No results" into the current locale...'),Object(o.b)("h2",{id:"why-not-i18n-or-another-library"},"Why Not i18n or another library?"),Object(o.b)("p",null,"i18n is a Javascript API that allows developers an easy and \"lightweight\" (<- we'll get to that) way of translating\ntextual content for a node based application. It's been great, but the reason we decided NOT to use it for this\nproject is because it would couple translated content with our code. This is a big no-no, as it goes against our WYSIWYG\nphilosophy for the ",Object(o.b)("inlineCode",{parentName:"p"},"content")," folder and means that content creators would have to translate text in 2 different places."),Object(o.b)("p",null,"Add to this the fact that the i18n package for gatsby, and other frameworks, has a tendency to be larger than necessary.\nWe believe that keeping things simple will be a positive for the scale of our application. Therefore, we present:"),Object(o.b)("h2",{id:"usetranslation-aka-maximumlang"},"UseTranslation (aka MaximumLang)"),Object(o.b)("p",null,"Did you catch the ",Object(o.b)("inlineCode",{parentName:"p"},"camlCase")," joke? If you did, kudos you're a super nerd too."),Object(o.b)("p",null,"useTranslation is a hook developed by Réjon Taylor-Foster with inspiration from and reference to\n",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://w11i.me/how-to-build-multilingual-website-in-next-js"}),"this blog"),". It initializes\ninside functional components and exports the current site's locale, and a ",Object(o.b)("inlineCode",{parentName:"p"},"t")," function."),Object(o.b)("h3",{id:"how-to-translate-in-code"},"How to translate in code"),Object(o.b)("p",null,"If your ",Object(o.b)("inlineCode",{parentName:"p"},"en/UI.json")," looks like this:"),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"en/UI.json"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "UI": {\n    "Language": "English",\n    "Search": "Search",\n    "No_Results": "No results for \'{{searchText}}\'",\n    "Home": "Home"\n  }\n}\n')),Object(o.b)("p",null,'Accomplish translating and rendering the word "Search" by writing the following:'),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"component-example.js"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import useTranslation from "@modules/localization/useTranslation";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation();\n\n  return <p>{t("Search")}</p>;\n};\n')),Object(o.b)("h3",{id:"langspaces"},"LangSpaces"),Object(o.b)("p",null,"We can extend the capabilities of this simple ",Object(o.b)("inlineCode",{parentName:"p"},"t")," function with what we call LangSpaces (Language Space):"),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"en/UI.json"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "UI": {\n    "Language": "English",\n    "Search": "Search",\n    "No_Results": "No results for \'{{searchText}}\'",\n    "Home": "Home",\n    "Errors": {\n      "error_a": "This is an error inside of a langspace called Errors"\n    }\n  }\n}\n')),Object(o.b)("p",null,'to translate and render "error_a", write the following:'),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"component-langspace-example.js"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import useTranslation from "@modules/localization/useTranslation";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation();\n\n  return <p>{t("error_a", "Errors")}</p>;\n};\n')),Object(o.b)("p",null,"For the sake of quality of life, it's possible to pass in a default lang space for your current translation as well:"),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"component-langspace-default-example.js"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import useTranslation from "@modules/localization/useTranslation";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation("Errors"); //<- Notice\n\n  return (\n    <p>{t("error_a")}</p> //<- Notice\n  );\n};\n')),Object(o.b)("h3",{id:"variables-and-plurals"},"Variables and Plurals"),Object(o.b)("p",null,"You want the variable of counter included and with plurals? No problem, anything inside ",Object(o.b)("inlineCode",{parentName:"p"},"{{}}")," will be replaced when rendered:"),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"en/UI.json"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "UI": {\n    "Friend": "A Friend",\n    "Friend_plural": "{{count}} Friends",\n    "VariableExample": "My name is {{name}}"\n  }\n}\n')),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"variable-component-example.js"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import useTranslation from \'@modules/localization/useTranslation\'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation();\n\n  return (\n       <p>{t("Friend", null, {count: 0})}</p> //0 Friends\n       <p>{t("Friend", null, {count: 1})}</p> //Friend\n       <p>{t("Friend", null, {count: 2})}</p> //2 Friends, ect.\n       <p>{t("VariableExample", null, {name: "Réjon"})}</p> // My name is Réjon\n   )\n}\n')),Object(o.b)("h3",{id:"advanced-plurals"},"Advanced Plurals"),Object(o.b)("p",null,"Because different locales can have multiple plurals, and different ways of counting (ie. Arabic),\nwe have a system in place to handle counting differently if the strict variable is added to the ",Object(o.b)("inlineCode",{parentName:"p"},"t")," function like so:\n",Object(o.b)("inlineCode",{parentName:"p"},"t('Friend', null, {count: 1, strict: true})"),". NOTE: ",Object(o.b)("inlineCode",{parentName:"p"},"Friend")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Friend_plural")," are still valid, but will be overridden when a strict argument is provided to the variable(s)."),Object(o.b)("p",null,"Your json will look like:"),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"en/UI.json"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "UI": {\n    "Friend": "A Friend",\n    "Friend_plural": "{{count}} Friends",\n    "Friend_0": "No Friends",\n    "Friend_1": "A Friend",\n    "Friend_2": "Two Friends",\n    "Friend_3": "Few Friends",\n    "Friend_4": "Many Friends",\n    "Friend_5": "Other/Lots of Friends"\n  }\n}\n')),Object(o.b)("p",null,"Your output will look something like this:"),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"advanced-variable-example.js"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import useTranslation from \'@modules/localization/useTranslation\'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation();\n\n  return (\n       <p>{t("Friend", null, {count: 0, strict: true})}</p> //No Friends (key: Friend_0)\n       <p>{t("Friend", null, {count: 1, strict: true})}</p> //A Friend (key: Friend_1)\n       <p>{t("Friend", null, {count: 2, strict: true})}</p> //Two Friends (key: Friend_2)\n       <p>{t("Friend", null, {count: 5, strict: true})}</p> //Other/Lots of Friends (key: Friend_5)\n   )\n}\n')),Object(o.b)(s,{mdxType:"CTA"},Object(o.b)("p",null,"NOTE: If your count goes past 4 or is less than 0, it will default to key_5")),Object(o.b)("h3",{id:"getting-a-localized-string-from-another-locale"},"Getting a localized string from another locale"),Object(o.b)("p",null,"Let's say you're currently on the English locale, but you need a string from the French locale,\nbut also want to keep your current locale. Say no more fam:"),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"en/UI.json"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "UI": {\n    "Language": "English"\n  }\n}\n')),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"fr/UI.json"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "UI": {\n    "Language": "Français"\n  }\n}\n')),Object(o.b)("div",{className:"gatsby-code-title prism-code-title"},"multilang-example.js"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),'import useTranslation from \'@modules/localization/useTranslation\'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation(); //Current locale is "en"\n\n  return (\n       <p>{t("Language")}</p> //English\n       <p>{t("Language",null,null,\'fr\')}</p> //Français\n   )\n}\n')),Object(o.b)("p",null,"These are just examples, for an in-depth dive on how the function works see the ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/makerdao/community/blob/r2d/src/modules/localization/useTranslation.js"}),"comments in code")),Object(o.b)(c,{mdxType:"List"},Object(o.b)(b,{to:"/en/blog/community/Engineering-for-communities",mdxType:"Link"},Object(o.b)("p",null,"Engineering For Communities: Part 1")),Object(o.b)(b,{to:"/en/blog/community/eng-search",mdxType:"Link"},Object(o.b)("p",null,"The Intracacies of Search: Part 2")),Object(o.b)(b,{to:"/en/blog/community/eng-navigation",mdxType:"Link"},Object(o.b)("p",null,"Navigating Through Automagic: Part 3")),Object(o.b)(b,{to:"/en/blog/community/eng-language",mdxType:"Link"},Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Translations for Global Communities: Part 4")))))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---blog-posts-en-blog-community-eng-language-mdx-52aef41297fe9ea0fafb.js.map