{"version":3,"sources":["webpack:///./content/en/resources/technical-content/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"6OAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,8BADR,8BAGA,+YAG4E,+BAAGC,WAAW,KAAQ,CAC9F,KAAQ,kDADgE,WAH5E,qLAOA,qFAAoE,+BAAGA,WAAW,KAAQ,CACtF,KAAQ,8BADwD,WAApE,mRAMA,uIACA,iBAAQ,CACN,GAAM,UADR,UAGA,mnBAQA,oDACA,iBAAQ,CACN,GAAM,sBADR,uBAGA,8DAA6C,0BAAYA,WAAW,KAAvB,MAA7C,2BAAuH,0BAAYA,WAAW,KAAvB,KAAvH,8BACe,0BAAYA,WAAW,KAAvB,KADf,sBACmF,0BAAYA,WAAW,KAAvB,UADnF,6WAMA,2KAEY,0BAAYA,WAAW,KAAvB,OAFZ,2LASJJ,EAAWK,gBAAiB","file":"component---content-en-resources-technical-content-index-mdx-7073e7c6a3b165bc0a01.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/community/community/src/modules/layouts/default_layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"crafting-technical-content\"\n    }}>{`Crafting Technical Content`}</h1>\n    <p>{`This section is not about writing - the Writing Guide in our Learn section will teach you everything\nyou need to know about our style, tone, and other content tricks. This section is all about how to\nadd automagic, ready-made React components to your files so that they really pop. The basics:\nbuttons, Calls to Action (CTAs), images, headers etc. can be found inside the `}<a parentName=\"p\" {...{\n        \"href\": \"/resources/technical-content/palette-recipes/\"\n      }}>{`pallete`}</a>{`. Gradually with time contributors progress to passing your own props to\nsome of the more advanced components this site offers, all while remaining in a familiar markdown file.`}</p>\n    <p>{`All of this is possible thanks the framework this site uses: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.org/\"\n      }}>{`Gatsby.`}</a>{` We're\nable to leverage it's unique and modern features to build an incredibly fast, slick and easy-to-use\nstructure that many different people, with very different skills, and at many levels of technical\nunderstanding can readily use, adapt, contribute to and extend.`}</p>\n    <p>{`Writing markdown which renders responsive React components is a superpower. We hope you'll use it responsibly.`}</p>\n    <h2 {...{\n      \"id\": \"basics\"\n    }}>{`Basics`}</h2>\n    <p>{`Not everyone wants to be a hardcore developer. Writing truly engaging content,\nthat both delights and educates people, is an underrated talent and you\nshouldn't be required to learn all the intricacies of modern web frameworks\njust to produce awesome pages. In the past, the best you could have done\nwould be to write content in your editor of choice, export it into markdown\nand then hope that some developer somewhere can incorporate it and add the styles,\nbuttons, images and other visual features which are required to make content transformational,\nrather than just more boring information.`}</p>\n    <p>{`This site changes all that.`}</p>\n    <h2 {...{\n      \"id\": \"what-is-mdx-anyway\"\n    }}>{`What is Mdx anyway?`}</h2>\n    <p>{`In short: it's your normal markdown - `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{` - with an added little `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{` factor.\nIn practice, the `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{` means that we can `}<inlineCode parentName=\"p\">{`extend`}</inlineCode>{` the capabilities of markdown\nand, in fact, create entire React components directly in our content files. If you\ndon't know what a React component is, or why you would want to have them in your\ncontent files, don't stress! This section is all about showing you how this is\nactually a writing superpower, and how you can put it to best use when contributing.`}</p>\n    <p>{`You might have used a markdown cheatsheet\nbefore to figure out how to handle headings, links, images, and other basic necessities.\nThe beauty of `}<inlineCode parentName=\"p\">{`mdx`}</inlineCode>{` is that all that stuff still works exactly the same. You'll still be\nwriting what appears - for the most part - to be normal markdown. It's just that\nwe can now do so much more...`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}