{"version":3,"sources":["webpack:///./src/modules/layouts/blogPost_layout.js","webpack:///./blogPosts/en/blog/community/eng-language.mdx"],"names":["ContentBlock","children","sx","width","m","mt","mb","pl","pr","position","pageContext","frontmatter","title","description","keywords","authors","date","image","recommend","t","useTranslation","useStaticQuery","blogPosts","siteContent","hasContributors","isArray","length","contributors","slice","pagePathSplit","pagePath","split","splice","typeIndex","indexOf","postType","postImage","isNaN","parseInt","otherPosts","map","rec","edges","filter","node","fileAbsolutePath","includes","concat","el","undefined","recommendations","seo","flexDirection","outline","icon","to","level","isDefaultLocale","src","objectFit","maxHeight","fontWeight","fontSize","justifyContent","mr","index","key","_frontmatter","makeShortcode","name","props","console","warn","CTA","List","Link","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"6FAAA,yHA8NA,SAASA,EAAT,GAAqC,IAAbC,EAAY,EAAZA,SACtB,OACE,YAAC,IAAD,CACEC,GAAI,CACFC,MAAO,CAAC,OAAQ,OAAQ,OACxBC,EAAG,SACHC,GAAI,CAAC,EAAG,EAAG,GACXC,GAAI,CAAC,EAAG,EAAG,GACXC,GAAI,CAAC,EAAG,EAAG,QACXC,GAAI,CAAC,EAAG,EAAG,GACXC,SAAU,aAGXR,GA/NQ,gBAAgC,IAA7BA,EAA4B,EAA5BA,SAAUS,EAAkB,EAAlBA,YAAkB,EASxCA,EAAYC,YAPdC,EAF0C,EAE1CA,MACAC,EAH0C,EAG1CA,YACAC,EAJ0C,EAI1CA,SACAC,EAL0C,EAK1CA,QACAC,EAN0C,EAM1CA,KACAC,EAP0C,EAO1CA,MACAC,EAR0C,EAQ1CA,UAGMC,EAAMC,cAAND,EAXoC,EAaTE,yBAAe,cAA1CC,EAboC,EAapCA,UAAWC,EAbyB,EAazBA,YA8CbC,EAAkBC,IAAQV,IAAYA,EAAQW,OAAS,EACvDC,EAAeH,EAAkBT,EAAQa,MAAM,EAAGb,EAAQW,QAAU,GAEpEG,EAAgBnB,EAAYoB,SAC/BC,MAAM,KACNC,OAAO,EAAGtB,EAAYoB,SAASC,MAAM,KAAKL,OAAS,GAChDO,EAAYJ,EAAcK,QAAQ,QAAU,EAG9CC,EACFF,IAAcJ,EAAcH,OAAS,EACjCG,EAAcI,GACd,UAEFG,EAAY,KAGdA,EADEnB,QACO,wBAA2BkB,EAA3B,SAELE,MAAMC,SAASrB,IAELA,EAEH,wBAA2BkB,EAA3B,IAAuClB,EAAvC,OAIb,IAAMsB,EAAarB,aAAH,EAAGA,EACfsB,KAAI,SAACC,GAEL,OAAOnB,EAAUoB,MAAMC,QAAO,qBAAGC,KAC1BC,iBAAiBC,SAASL,MAC/B,MAEHM,OACC7B,aARe,EAQfA,EAAWsB,KAAI,SAACC,GAEd,OAAOlB,EAAYmB,MAAMC,QAAO,qBAAGC,KAC5BC,iBAAiBC,SAASL,MAC/B,OAGLE,QAAO,SAACK,GAAD,YAAeC,IAAPD,KAEZE,EAAkBX,GAAcA,EAAWb,OAAS,EAEpDyB,EAAM,CACVvC,QACAC,cACAC,YAGF,OACE,YAAC,IAAD,CAAMZ,GAAI,CAAEkD,cAAe,WACzB,YAACpD,EAAD,KACE,YAAC,IAAQmD,GACT,YAAC,IAAD,CAAQE,SAAO,EAACC,KAAK,eAAeC,GAAG,SACpCpC,EAAE,iBAGL,YAAC,IAAD,CAASqC,MAAO,GAAI5C,GAEnBG,EACC,YAAC,IAAD,CACEb,GAAI,CAAEI,GAAI,QACVS,QAASA,EACTC,KAAMA,EACNyC,iBAAiB,IAEjB,KAEJ,mBACEC,IAAKtB,EACLlC,GAAI,CACFC,MAAO,OACPwD,UAAW,QACXC,UAAW,QACXtD,GAAI,UAIR,mBACEJ,GAAI,CACF,sBAAuB,CACrBG,GAAI,KAIPJ,IAIJuB,EACC,YAAC,IAAD,CAAKtB,GAAI,CAAEK,GAAI,CAAC,EAAG,EAAG,QAASC,GAAI,CAAC,EAAG,EAAG,GAAIH,GAAI,EAAGC,GAAI,IACvD,YAAC,IAAD,OAEA,KAEHkB,EACC,YAACxB,EAAD,KACE,kBAAIE,GAAI,CAAE2D,WAAY,MAAOC,SAAU,SAAvC,kBACA,iBAAG5D,GAAI,CAAEI,GAAI,SAAb,6DAGA,YAAC,IAAD,CAAkBqB,aAAcA,KAEhC,KAEHuB,EACC,YAAC,IAAD,CAAKhD,GAAI,CAAEK,GAAI,CAAC,EAAG,EAAG,QAASC,GAAI,CAAC,EAAG,EAAG,GAAIH,GAAI,EAAGC,GAAI,IACvD,YAAC,IAAD,OAEA,KAEH4C,EACC,YAAC,IAAD,CACEhD,GAAI,CACFC,MAAO,CAAC,OAAQ,OAAQ,OACxBC,EAAG,SACHC,GAAI,CAAC,EAAG,EAAG,GACXC,GAAI,CAAC,EAAG,EAAG,GACXC,GAAI,CAAC,EAAG,EAAG,GACXC,GAAI,CAAC,EAAG,EAAG,GACXC,SAAU,aAGZ,kBAAIP,GAAI,CAAEI,GAAI,OAAQuD,WAAY,MAAOC,SAAU,SAChD,IADH,YAEY,KAEZ,YAAC,IAAD,CACE5D,GAAI,CACF6D,eAAgB,QAChB5D,MAAO,OACPG,GAAI,CAAC,EAAG,OAAQ,QAChB8C,cAAe,CAAC,SAAU,MAAO,OACjC,yBAA0B,CACxBY,GAAI,UAIPzB,EAAWC,KAAI,WAAWyB,GAAX,IAAGrB,EAAH,EAAGA,KAAH,OACd,YAAC,IAAD,iBAAcA,EAAd,CAAoBsB,IAAG,uBAAyBD,UAIpD,Q,kLCjNGE,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAML,EAAc,OACpBM,EAAON,EAAc,QACrBO,EAAOP,EAAc,QACrBQ,EAAc,CAClBT,gBAEIU,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGV,EACF,8BACD,OAAO,YAACO,EAAD,iBAAeD,EAAiBN,EAAhC,CAAuCU,WAAYA,EAAYC,QAAQ,cAG5E,gFAA+D,+BAAGC,WAAW,KAAQ,CACjF,KAAQ,oCADmD,iBAA/D,0EAG2C,0BAAYA,WAAW,KAAvB,WAH3C,wDAIF,kBAAIA,WAAW,KAAf,aAJE,gQAOA,iBAAQ,CACN,GAAM,mCADR,oCAGA,6YAGiB,0BAAYA,WAAW,KAAvB,WAHjB,+FAIA,oQAEA,iBAAQ,CACN,GAAM,kCADR,oCAGA,0CAAyB,0BAAYA,WAAW,KAAvB,YAAzB,qDACA,0HACF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,iEADd,aADE,+FAIwE,0BAAYA,WAAW,KAAvB,KAJxE,cAKA,iBAAQ,CACN,GAAM,4BADR,4BAGA,gCAAe,0BAAYA,WAAW,KAAvB,cAAf,qBACA,kBAAS,CACP,UAAa,sCADf,cAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,4JAWL,yGACA,kBAAS,CACP,UAAa,sCADf,wBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8LAUL,iBAAQ,CACN,GAAM,cADR,cAGA,sEAAqD,0BAAYA,WAAW,KAAvB,KAArD,4DACA,kBAAS,CACP,UAAa,sCADf,cAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8PAcL,gFACA,kBAAS,CACP,UAAa,sCADf,kCAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yMAUL,6IACA,kBAAS,CACP,UAAa,sCADf,0CAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2OAYL,iBAAQ,CACN,GAAM,yBADR,yBAGA,gHAA+F,0BAAYA,WAAW,KAAvB,QAA/F,oCACA,kBAAS,CACP,UAAa,sCADf,cAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+IAUL,kBAAS,CACP,UAAa,sCADf,iCAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,obAeL,iBAAQ,CACN,GAAM,oBADR,oBAGA,2NAC8F,0BAAYA,WAAW,KAAvB,KAD9F,uBAEF,0BAAYA,WAAW,KAAvB,+CAFE,WAEiG,0BAAYA,WAAW,KAAvB,UAFjG,QAE4J,0BAAYA,WAAW,KAAvB,iBAF5J,mGAGA,kDACA,kBAAS,CACP,UAAa,sCADf,cAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uSAeL,mEACA,kBAAS,CACP,UAAa,sCADf,gCAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iiBAeL,YAACT,EAAD,CAAKQ,QAAQ,OACX,qGAEF,iBAAQ,CACN,GAAM,kDADR,kDAGA,qLAEA,kBAAS,CACP,UAAa,sCADf,cAGA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,sDAQL,kBAAS,CACP,UAAa,sCADf,cAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uDAQL,kBAAS,CACP,UAAa,sCADf,wBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4SAaL,wGAAuF,+BAAGA,WAAW,KAAQ,CACzG,KAAQ,8FAD2E,qBAGvF,YAACR,EAAD,CAAMO,QAAQ,QACZ,YAACN,EAAD,CAAMpB,GAAG,iDAAiD0B,QAAQ,QAChE,6DAEF,YAACN,EAAD,CAAMpB,GAAG,gCAAgC0B,QAAQ,QAC/C,2DAEF,YAACN,EAAD,CAAMpB,GAAG,oCAAoC0B,QAAQ,QACnD,8DAEF,YAACN,EAAD,CAAMpB,GAAG,kCAAkC0B,QAAQ,QACjD,qBAAG,sBAAQC,WAAW,KAAnB,mDAOXH,EAAWI,gBAAiB","file":"component---blog-posts-en-blog-community-eng-language-mdx-52aef41297fe9ea0fafb.js","sourcesContent":["/** @jsx jsx */\n\nimport isArray from \"lodash/isArray\";\nimport { BlogAuthor, BlogCard, BlogContributors } from \"@modules/blog\";\nimport { useTranslation } from \"@modules/localization\";\nimport { Button, Divider } from \"@modules/ui\";\nimport { Heading } from \"@modules/ui/heading\";\nimport { SEO } from \"@modules/utility\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { Box, Flex, jsx } from \"theme-ui\";\n\n///MDX Layout for POSTs\nexport default ({ children, pageContext }) => {\n  const {\n    title,\n    description,\n    keywords, //<- Seo\n    authors,\n    date,\n    image,\n    recommend,\n  } = pageContext.frontmatter;\n\n  const { t } = useTranslation();\n\n  const { blogPosts, siteContent } = useStaticQuery(graphql`\n    query blogPostRecommendations {\n      #Regex for all blog posts\n      blogPosts: allMdx(\n        filter: { fileAbsolutePath: { regex: \"//blogPosts/\" } }\n      ) {\n        edges {\n          node {\n            fileAbsolutePath\n            excerpt(truncate: true, pruneLength: 200)\n            frontmatter {\n              title\n              date(formatString: \"MM/DD/YYYY\")\n              description\n              authors\n              image\n            }\n            id\n          }\n        }\n      }\n      siteContent: allMdx(\n        filter: {\n          fileAbsolutePath: {\n            regex: \"/content/([\\\\\\\\w]{2})/(?!header.mdx|index.mdx|sidenav.mdx|example.mdx|social.mdx|footer.mdx|404.mdx|.js|.json)/\"\n          }\n        }\n      ) {\n        edges {\n          node {\n            excerpt(truncate: true, pruneLength: 200)\n            headings(depth: h1) {\n              value\n            }\n            fileAbsolutePath\n            frontmatter {\n              title\n              description\n              order\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const hasContributors = isArray(authors) && authors.length > 1;\n  const contributors = hasContributors ? authors.slice(1, authors.length) : [];\n\n  const pagePathSplit = pageContext.pagePath\n    .split(\"/\")\n    .splice(1, pageContext.pagePath.split(\"/\").length - 2);\n  const typeIndex = pagePathSplit.indexOf(\"blog\") + 1;\n\n  //Split absolute path up to blog, get directory AFTER blog.\n  let postType =\n    typeIndex !== pagePathSplit.length - 1\n      ? pagePathSplit[typeIndex]\n      : \"general\";\n\n  let postImage = null;\n\n  if (image === null || image === undefined) {\n    postImage = `/images/blog_headers/${postType}_1.png`; //will be general image 1\n  } else {\n    if (isNaN(parseInt(image))) {\n      //Not a number, but a string. Expect entire src url\n      postImage = image;\n    } else {\n      postImage = `/images/blog_headers/${postType}_${image}.png`;\n    }\n  }\n\n  const otherPosts = recommend\n    ?.map((rec) => {\n      //Run through recommendation map for blog post recommendations\n      return blogPosts.edges.filter(({ node }) =>\n        node.fileAbsolutePath.includes(rec)\n      )[0];\n    })\n    .concat(\n      recommend?.map((rec) => {\n        //Concat recommendations for all other site content.\n        return siteContent.edges.filter(({ node }) =>\n          node.fileAbsolutePath.includes(rec)\n        )[0];\n      })\n    )\n    .filter((el) => el !== undefined); //Filter out empty array/undefined runs of recommend.\n\n  const recommendations = otherPosts && otherPosts.length > 0;\n\n  const seo = {\n    title,\n    description,\n    keywords,\n  };\n\n  return (\n    <Flex sx={{ flexDirection: \"column\" }}>\n      <ContentBlock>\n        <SEO {...seo} />\n        <Button outline icon=\"chevron_left\" to=\"/blog\">\n          {t(\"Back_To_Blog\")}\n        </Button>\n\n        <Heading level={1}>{title}</Heading>\n\n        {authors ? (\n          <BlogAuthor\n            sx={{ mb: \"16px\" }}\n            authors={authors}\n            date={date}\n            isDefaultLocale={true}\n          />\n        ) : null}\n\n        <img\n          src={postImage}\n          sx={{\n            width: \"100%\",\n            objectFit: \"cover\",\n            maxHeight: \"478px\",\n            mb: \"48px\",\n          }}\n        />\n\n        <div\n          sx={{\n            \"& > *:first-of-type\": {\n              mt: 0,\n            },\n          }}\n        >\n          {children}\n        </div>\n      </ContentBlock>\n\n      {hasContributors ? (\n        <Box sx={{ pl: [4, 4, \"64px\"], pr: [4, 4, 0], mt: 2, mb: 2 }}>\n          <Divider />\n        </Box>\n      ) : null}\n\n      {hasContributors ? (\n        <ContentBlock>\n          <h2 sx={{ fontWeight: \"500\", fontSize: \"32px\" }}> Contributors </h2>\n          <p sx={{ mb: \"40px\" }}>\n            This article is possible with a little help from friends.\n          </p>\n          <BlogContributors contributors={contributors} />\n        </ContentBlock>\n      ) : null}\n\n      {recommendations ? (\n        <Box sx={{ pl: [4, 4, \"64px\"], pr: [4, 4, 0], mt: 4, mb: 2 }}>\n          <Divider />\n        </Box>\n      ) : null}\n\n      {recommendations ? (\n        <Box\n          sx={{\n            width: [\"100%\", \"100%\", \"90%\"],\n            m: \"0 auto\",\n            mt: [2, 4, 4],\n            mb: [2, 4, 4],\n            pl: [4, 4, 0],\n            pr: [4, 4, 0],\n            position: \"relative\",\n          }}\n        >\n          <h2 sx={{ mb: \"66px\", fontWeight: \"500\", fontSize: \"32px\" }}>\n            {\" \"}\n            Read More{\" \"}\n          </h2>\n          <Flex\n            sx={{\n              justifyContent: \"start\",\n              width: \"100%\",\n              mb: [0, \"80px\", \"80px\"],\n              flexDirection: [\"column\", \"row\", \"row\"],\n              \"& > *:not(:last-child)\": {\n                mr: \"96px\",\n              },\n            }}\n          >\n            {otherPosts.map(({ node }, index) => (\n              <BlogCard {...node} key={`blog-recommendation-${index}`} />\n            ))}\n          </Flex>\n        </Box>\n      ) : null}\n    </Flex>\n  );\n};\n\nfunction ContentBlock({ children }) {\n  return (\n    <Box\n      sx={{\n        width: [\"100%\", \"100%\", \"80%\"],\n        m: \"0 auto\",\n        mt: [2, 4, 4],\n        mb: [2, 4, 4],\n        pl: [4, 4, \"64px\"],\n        pr: [4, 4, 0],\n        position: \"relative\",\n      }}\n    >\n      {children}\n    </Box>\n  );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/community/community/src/modules/layouts/blogPost_layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CTA = makeShortcode(\"CTA\");\nconst List = makeShortcode(\"List\");\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Translations can present a challenge. But not if you're `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/MaximumCrash\"\n      }}>{`Maximum Crash`}</a>{`. Our philosophy is that\n\"content creators write the website,\" so the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` folder therefore decides how the site is rendered,\n`}<em parentName=\"p\">{`including`}</em>{` translated content. However, this is an issue when translating inline UI elements that we won't\nprovide in MDX (like the Search bar). This means there's a break in how we can translate copy like \"Search\"\nand \"No results\" into the current locale...`}</p>\n    <h2 {...{\n      \"id\": \"why-not-i18n-or-another-library\"\n    }}>{`Why Not i18n or another library?`}</h2>\n    <p>{`i18n is a Javascript API that allows developers an easy and \"lightweight\" (<- we'll get to that) way of translating\ntextual content for a node based application. It's been great, but the reason we decided NOT to use it for this\nproject is because it would couple translated content with our code. This is a big no-no, as it goes against our WYSIWYG\nphilosophy for the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` folder and means that content creators would have to translate text in 2 different places.`}</p>\n    <p>{`Add to this the fact that the i18n package for gatsby, and other frameworks, has a tendency to be larger than necessary.\nWe believe that keeping things simple will be a positive for the scale of our application. Therefore, we present:`}</p>\n    <h2 {...{\n      \"id\": \"usetranslation-aka-maximumlang\"\n    }}>{`UseTranslation (aka MaximumLang)`}</h2>\n    <p>{`Did you catch the `}<inlineCode parentName=\"p\">{`camlCase`}</inlineCode>{` joke? If you did, kudos you're a super nerd too.`}</p>\n    <p>{`useTranslation is a hook developed by Réjon Taylor-Foster with inspiration from and reference to\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://w11i.me/how-to-build-multilingual-website-in-next-js\"\n      }}>{`this blog`}</a>{`. It initializes\ninside functional components and exports the current site's locale, and a `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` function.`}</p>\n    <h3 {...{\n      \"id\": \"how-to-translate-in-code\"\n    }}>{`How to translate in code`}</h3>\n    <p>{`If your `}<inlineCode parentName=\"p\">{`en/UI.json`}</inlineCode>{` looks like this:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"English\",\n    \"Search\": \"Search\",\n    \"No_Results\": \"No results for '{{searchText}}'\",\n    \"Home\": \"Home\"\n  }\n}\n`}</code></pre>\n    <p>{`Accomplish translating and rendering the word \"Search\" by writing the following:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`component-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from \"@modules/localization/useTranslation\";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation();\n\n  return <p>{t(\"Search\")}</p>;\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"langspaces\"\n    }}>{`LangSpaces`}</h3>\n    <p>{`We can extend the capabilities of this simple `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` function with what we call LangSpaces (Language Space):`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"English\",\n    \"Search\": \"Search\",\n    \"No_Results\": \"No results for '{{searchText}}'\",\n    \"Home\": \"Home\",\n    \"Errors\": {\n      \"error_a\": \"This is an error inside of a langspace called Errors\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`to translate and render \"error_a\", write the following:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`component-langspace-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from \"@modules/localization/useTranslation\";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation();\n\n  return <p>{t(\"error_a\", \"Errors\")}</p>;\n};\n`}</code></pre>\n    <p>{`For the sake of quality of life, it's possible to pass in a default lang space for your current translation as well:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`component-langspace-default-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from \"@modules/localization/useTranslation\";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation(\"Errors\"); //<- Notice\n\n  return (\n    <p>{t(\"error_a\")}</p> //<- Notice\n  );\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"variables-and-plurals\"\n    }}>{`Variables and Plurals`}</h3>\n    <p>{`You want the variable of counter included and with plurals? No problem, anything inside `}<inlineCode parentName=\"p\">{`{{}}`}</inlineCode>{` will be replaced when rendered:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Friend\": \"A Friend\",\n    \"Friend_plural\": \"{{count}} Friends\",\n    \"VariableExample\": \"My name is {{name}}\"\n  }\n}\n`}</code></pre>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`variable-component-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from '@modules/localization/useTranslation'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation();\n\n  return (\n       <p>{t(\"Friend\", null, {count: 0})}</p> //0 Friends\n       <p>{t(\"Friend\", null, {count: 1})}</p> //Friend\n       <p>{t(\"Friend\", null, {count: 2})}</p> //2 Friends, ect.\n       <p>{t(\"VariableExample\", null, {name: \"Réjon\"})}</p> // My name is Réjon\n   )\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"advanced-plurals\"\n    }}>{`Advanced Plurals`}</h3>\n    <p>{`Because different locales can have multiple plurals, and different ways of counting (ie. Arabic),\nwe have a system in place to handle counting differently if the strict variable is added to the `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` function like so:\n`}<inlineCode parentName=\"p\">{`t('Friend', null, {count: 1, strict: true})`}</inlineCode>{`. NOTE: `}<inlineCode parentName=\"p\">{`Friend`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Friend_plural`}</inlineCode>{` are still valid, but will be overridden when a strict argument is provided to the variable(s).`}</p>\n    <p>{`Your json will look like:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Friend\": \"A Friend\",\n    \"Friend_plural\": \"{{count}} Friends\",\n    \"Friend_0\": \"No Friends\",\n    \"Friend_1\": \"A Friend\",\n    \"Friend_2\": \"Two Friends\",\n    \"Friend_3\": \"Few Friends\",\n    \"Friend_4\": \"Many Friends\",\n    \"Friend_5\": \"Other/Lots of Friends\"\n  }\n}\n`}</code></pre>\n    <p>{`Your output will look something like this:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`advanced-variable-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from '@modules/localization/useTranslation'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation();\n\n  return (\n       <p>{t(\"Friend\", null, {count: 0, strict: true})}</p> //No Friends (key: Friend_0)\n       <p>{t(\"Friend\", null, {count: 1, strict: true})}</p> //A Friend (key: Friend_1)\n       <p>{t(\"Friend\", null, {count: 2, strict: true})}</p> //Two Friends (key: Friend_2)\n       <p>{t(\"Friend\", null, {count: 5, strict: true})}</p> //Other/Lots of Friends (key: Friend_5)\n   )\n}\n`}</code></pre>\n    <CTA mdxType=\"CTA\">\n      <p>{`NOTE: If your count goes past 4 or is less than 0, it will default to key_5`}</p>\n    </CTA>\n    <h3 {...{\n      \"id\": \"getting-a-localized-string-from-another-locale\"\n    }}>{`Getting a localized string from another locale`}</h3>\n    <p>{`Let's say you're currently on the English locale, but you need a string from the French locale,\nbut also want to keep your current locale. Say no more fam:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"English\"\n  }\n}\n`}</code></pre>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`fr/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"Français\"\n  }\n}\n`}</code></pre>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`multilang-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from '@modules/localization/useTranslation'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation(); //Current locale is \"en\"\n\n  return (\n       <p>{t(\"Language\")}</p> //English\n       <p>{t(\"Language\",null,null,'fr')}</p> //Français\n   )\n}\n`}</code></pre>\n    <p>{`These are just examples, for an in-depth dive on how the function works see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/makerdao/community/blob/r2d/src/modules/localization/useTranslation.js\"\n      }}>{`comments in code`}</a></p>\n    <List mdxType=\"List\">\n      <Link to=\"/en/blog/community/Engineering-for-communities\" mdxType=\"Link\">\n        <p>{`Engineering For Communities: Part 1`}</p>\n      </Link>\n      <Link to=\"/en/blog/community/eng-search\" mdxType=\"Link\">\n        <p>{`The Intracacies of Search: Part 2`}</p>\n      </Link>\n      <Link to=\"/en/blog/community/eng-navigation\" mdxType=\"Link\">\n        <p>{`Navigating Through Automagic: Part 3`}</p>\n      </Link>\n      <Link to=\"/en/blog/community/eng-language\" mdxType=\"Link\">\n        <p><strong parentName=\"p\">{`Translations for Global Communities: Part 4`}</strong></p>\n      </Link>\n    </List>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}